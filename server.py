from –°onfig import TOKEN
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
import logging
import telegram
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ConversationHandler, Updater
import wget

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
# –£ –Ω–µ—ë –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, updater, –ø—Ä–∏–Ω—è–≤—à–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.

# –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
# –£ –Ω–µ—ë –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, updater, –ø—Ä–∏–Ω—è–≤—à–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.
otvet1 = list()
photo_list = []
async def start(update, context):
    user = update.effective_user
    language = update.effective_user.language_code
    if language == 'en':
        await update.message.reply_html(
            f"Hi, {user.mention_html()}! I'm a telegram bot to find someone to talk to, click 'help' to get information about me",
            reply_markup=markup
        )
    if language == 'ru':
        await update.message.reply_html(
            f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø telegram-–±–æ—Ç, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –Ω–∞–±–µ—Ä–∏—Ç–µ '/help', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –º–Ω–µ",
            reply_markup=markup
        )


async def help_command(update, context):
    language = update.effective_user.language_code
    if language == 'en':
        await update.message.reply_text("I'm helpless for now, but then there will be functions...")
    else:
        await update.message.reply_text(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –±–æ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å–µ–±–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞, –∑–∞–ø–æ–ª–Ω–∏–≤ –∞–Ω–∫–µ—Ç—É."
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /registration, –µ—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ - /close",
            reply_markup=markup)

# def image_handler(update, context):
#     file = update.message.photo[0].file_id
#     obj = context.bot.get_file(file)
#     obj.download()

async def registration(update, context):
    await update.message.reply_text(
        "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –∂–∏–≤—ë—Ç–µ?")

    return 1


async def first_response(update, context):
    # –≠—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å.
    # –ú—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤–æ –≤—Ç–æ—Ä–æ–º –≤–æ–ø—Ä–æ—Å–µ.
    city = update.message.text
    otvet1.append(city)
    await update.message.reply_text(
        f"–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    # –°–ª–µ–¥—É—é—â–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º states[2]
    return 2


async def second_response(update, context):
    # –≠—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å.
    # –ú—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤–æ –≤—Ç–æ—Ä–æ–º –≤–æ–ø—Ä–æ—Å–µ.
    years = update.message.text
    otvet1.append(years)
    await update.message.reply_text(
        f"–ö–∞–∫–∏–µ —É –≤–∞—Å —É–≤–ª–µ—á–µ–Ω–∏—è?")
    # –°–ª–µ–¥—É—é—â–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º states[2]
    return 3

async def third_response(update, context):
    hobbies = update.message.text
    otvet1.append(hobbies)
    await update.message.reply_text(
        f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ.")
    return 4


async def four_response(update, context):
    # –û—Ç–≤–µ—Ç –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å.
    # –ú—ã –º–æ–∂–µ–º –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∫—É–¥–∞-–ª–∏–±–æ.
    file = update.message.photo[-1].file_id
    # obj = context.get_file(file)
    # obj.download()
    otvet1.append(file)
    await update.message.reply_text(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞!")
    return ConversationHandler.END  # –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞, –æ–∑–Ω–∞—á–∞—é—â–∞—è –∫–æ–Ω–µ—Ü –¥–∏–∞–ª–æ–≥–∞.
    # –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ states –∏ fallbacks —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏.


async def anketa(update, context):
    await update.message.reply_text(
        ", ".join(otvet1),
        reply_markup=markup)


async def close(update, context):
    await update.message.reply_text(
        '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞',
        reply_markup=markdown
    )


btn1 = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üß©"
reply_keyboard = [['/registration', '/search'],
                  ['/anketa', '/help']]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
markdown = ReplyKeyboardRemove()



async def search(update, context):
    await update.message.reply_text(
        "–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")


def main():
    application = Application.builder().token(TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('registration', registration)],

        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, first_response)],
            2: [MessageHandler(filters.TEXT & ~filters.COMMAND, second_response)],
            3: [MessageHandler(filters.TEXT & ~filters.COMMAND, third_response)],
            4: [MessageHandler(filters.TEXT & ~filters.COMMAND, four_response)]
        },
        fallbacks=[CommandHandler('stop', four_response)]
    )
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("search", search))
    application.add_handler(CommandHandler("anketa", anketa))
    application.add_handler(CommandHandler("close", close))
    application.add_handler(conv_handler)
    application.run_polling()


if __name__ == '__main__':
    main()